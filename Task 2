def check_incomplete_data(lead):
    required_fields = ['email', 'name', 'company', 'phone']
    
    missing_fields = [field for field in required_fields if not lead.get(field)]
    
    if missing_fields:
        return False, missing_fields
    else:
        return True, None

# Example lead data
lead = {
    'email': 'johndoe@example.com',
    'name': 'John Doe',
    'company': '',
    'phone': '555-1234'
}

is_complete, missing_fields = check_incomplete_data(lead)

if not is_complete:
    print(f"Lead is incomplete. Missing fields: {', '.join(missing_fields)}")
else:
    print("Lead is complete and ready for processing.")
def score_lead(lead):
    # Example scoring logic
    score = 0
    
    if lead.get('company_size', 0) > 500:  # Large companies get a higher score
        score += 10
    if lead.get('job_title', '').lower() in ['ceo', 'founder', 'cmo']:  # Decision-makers
        score += 5
    if lead.get('budget', 0) >= 50000:  # High-budget leads
        score += 8

    return score

# Example lead data
lead = {
    'name': 'Alice Smith',
    'email': 'alice.smith@bigcorp.com',
    'company_size': 600,
    'job_title': 'CEO',
    'budget': 100000
}

lead_score = score_lead(lead)

if lead_score >= 15:
    print(f"High-value lead identified. Score: {lead_score}")
else:
    print(f"Lead score: {lead_score}")
from datetime import datetime
import pytz

def convert_to_local_time(lead_time, timezone_str):
    # Convert the lead's timestamp to local time
    local_tz = pytz.timezone(timezone_str)
    lead_time = pytz.utc.localize(lead_time)  # Assuming the input is in UTC
    local_time = lead_time.astimezone(local_tz)
    
    return local_time.strftime('%Y-%m-%d %H:%M:%S')

# Example lead data
lead = {
    'name': 'Bob Johnson',
    'email': 'bob.johnson@techstartup.com',
    'timestamp': '2024-11-20T14:00:00Z',  # UTC timestamp
    'timezone': 'America/New_York'  # Time zone info
}

# Convert timestamp to lead's local time zone
lead_time = datetime.strptime(lead['timestamp'], '%Y-%m-%dT%H:%M:%SZ')
local_time = convert_to_local_time(lead_time, lead['timezone'])

print(f"Lead's local time: {local_time}")
